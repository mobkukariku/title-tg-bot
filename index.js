const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
const schedule = require('node-schedule');

require('dotenv').config();
 
const tg_token = process.env.TELEGRAM_TOKEN;  
const channel_id = process.env.CHANNEL_ID;  
const weather_token = process.env.WEATHER_TOKEN;

const tgBot = new TelegramBot(tg_token, { polling: true });

const fetchWeather = async (cityName) => {
    try {
        const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${weather_token}&lang=ru`);
        return data;
    } catch (e) {
        console.error(e);
        return null; 
    }
};


const kelvinToCelsius = (temp) => {
    return Math.round(temp - 273.15).toFixed(2);
};

tgBot.onText(/\/start/, (msg) => {
    
    tgBot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
});

tgBot.onText(/\/weather(?:\s+(.+))?/, async (msg, match) => {
    const cityName = match[1];
    const data = await fetchWeather(cityName);

    if(!data) {
        return tgBot.sendMessage(msg.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${cityName}`);
    }

    const weather = data.weather[0].description;
    const temp = data.main.temp;
    const message = messagePattern(cityName, temp, weather);

    tgBot.sendMessage(msg.chat.id, message, {parse_mode: 'Markdown'});
});


const messagePattern = (cityName, temp, weather) => {
    return `
    *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*
----------------------------------
üåû –≥–æ—Ä–æ–¥ *${cityName}*
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *${kelvinToCelsius(temp)}¬∞C*
‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: *${weather}*
----------------------------------
${messagePatt(kelvinToCelsius(temp), weather)}
    `;
};

const messagePatt = (temp, weather) => {
    if (temp > 0 && temp < 10) {
        return `–ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, —Ö—É–¥–∏ –∏–ª–∏ –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –±—É–¥–µ—Ç –∑–∞–µ–±–∏—Å—å.`;
    } else if (temp >= 10 && temp < 20) {
        return `–ö–∞–∫ –±—É–¥—Ç–æ –º–æ–∂–Ω–æ –≤ —Ñ—É—Ç–±–æ–ª–∫–µ —Ö–æ–¥–∏—Ç—å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∂–∏–∑–Ω–∏.`;
    } else if (temp >= 20) {
        return `–ö–∞–∫ –±—É–¥—Ç–æ –ø–∏–∑–¥–µ—Ü –∂–∞—Ä–∫–æ.`;
    } else if (temp < 0 && temp > -10) {
        return `–•–æ–ª–æ–¥–Ω–æ–≤–∞—Ç–æ`;
    } else if (temp <= -10 && temp > -20) {
        return `–¢–µ–±–µ –ª—É—á—à–µ –Ω–µ –≤—ã–µ–±—ã–≤–∞—Ç—å—Å—è –∏ –≥–∞–º–∞–∂ –≤ –µ–±–∞–ª–æ –Ω–∞–µ–±–Ω—É—Ç—å.`;
    } else if (temp <= -20 && temp > -30) {
        return `–í —Ç–∞–∫—É—é –ø–æ–≥–æ–¥—É —Å–∫—É—á–∞–µ—à—å –æ –ª–µ—Ç–µ.`;
    } else if (temp <= -30) {
        return `–ü–∏–∑–¥–µ—Ü –º–æ–∂–Ω–æ –≤—Å–µ –æ—Ç–º–æ—Ä–æ–∑–∏—Ç—å. –õ—É—á—à–µ –Ω–∞ —É–ª–∏—Ü—É –Ω–µ –≤—ã—Ö–æ–¥–∏, –µ—Å–ª–∏ —Ç—ã –¥–∞—É–Ω –µ–±–∞–Ω–Ω—ã–π.`;
    } else {
        return `–ù–µ—Ç –æ—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ç–∞–∫–æ–π –ø–æ–≥–æ–¥—ã.`; 
    }
};


const job = schedule.scheduleJob('0 2 * * *', async () => {
    const weather = await fetchWeather('–ö–∞—Å–∫–µ–ª–µ–Ω');
    const temp = weather.main.temp;
    const message = messagePattern('–ö–∞—Å–∫–µ–ª–µ–Ω', temp, weather.weather[0].description);
    tgBot.sendMessage(channel_id, message, {parse_mode: 'Markdown'});
})