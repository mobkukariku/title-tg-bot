const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
const schedule = require('node-schedule');


require('dotenv').config();

const tg_token = process.env.TELEGRAM_TOKEN;  
const channel_id = process.env.CHANNEL_ID;  
const weather_token = process.env.WEATHER_TOKEN;
const tgBot = new TelegramBot(tg_token, { polling: true });

const fetchWeather = async (cityName) => {
    try {
        const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${weather_token}&lang=ru`);
        return data;
    } catch (e) {
        console.error(e);
        return null; 
    }
};

const fetchHourlyForecast = async (cityName) => {
    try {
        const { data } = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${weather_token}&lang=ru`);
        return data.list.slice(0, 3);
    } catch (e) {
        console.error(e);
        return null;
    }
};

tgBot.onText(/\/start/, (msg) => {
    tgBot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
});

tgBot.onText(/\/weather(?:\s+(.+))?/, async (msg, match) => {
    const cityName = match[1];
    const data = await fetchWeather(cityName);
    const hourlyForecast = await fetchHourlyForecast(cityName);
    if (!data || !hourlyForecast) {
        return tgBot.sendMessage(msg.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${cityName}`);
    }
    const weather = data.weather[0].description;
    const temp = data.main.temp;
    const message = messagePattern(cityName, temp, weather, hourlyForecast);
    tgBot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
});

const getClothingAdvice = require('./clothingAdvice');

const kelvinToCelsius = (temp) => {
    return Math.round(temp - 273.15).toFixed(2);
};
const messagePattern = (cityName, temp, weather, hourlyForecast) => {
    return `
*–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*
---------------------------------------
üåû –ì–æ—Ä–æ–¥: *${cityName}*
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *${kelvinToCelsius(temp)}¬∞C*
‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: *${weather}*
---------------------------------------
${getClothingAdvice(kelvinToCelsius(temp), weather)}
---------------------------------------
${hourlyForecastPattern(hourlyForecast)}
    `;
};



const hourlyForecastPattern = (forecast) => {
    let forecastMessage = `*–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 —á–∞—Å–∞:*\n`;

    forecast.forEach((hour) => {
        const date = new Date(hour.dt * 1000);
        const time = date.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" });
        const temp = kelvinToCelsius(hour.main.temp);
        const description = hour.weather[0].description;

        const hourOfDay = date.getHours();
        const clockEmojis = ["üïõ", "üïê", "üïë", "üïí", "üïì", "üïî", "üïï", "üïñ", "üïó", "üïò", "üïô", "üïö"];
        const clockIcon = clockEmojis[hourOfDay % 12]; 

        forecastMessage += `\n${clockIcon} *${time}*\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *${temp}¬∞C*\n‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: *${description.charAt(0).toUpperCase() + description.slice(1)}*\n`;
    });

    return forecastMessage;
};





const job = schedule.scheduleJob('0 2 * * *', async () => {
    const weather = await fetchWeather('–ö–∞—Å–∫–µ–ª–µ–Ω');
    const hourlyForecast = await fetchHourlyForecast('–ö–∞—Å–∫–µ–ª–µ–Ω');

    if (!weather || !hourlyForecast) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ö–∞—Å–∫–µ–ª–µ–Ω–∞');
        return;
    }

    const temp = weather.main.temp;
    const message = messagePattern('–ö–∞—Å–∫–µ–ª–µ–Ω', temp, weather.weather[0].description, hourlyForecast);

    tgBot.sendMessage(channel_id, message, { parse_mode: 'Markdown' });
});
